#!/usr/bin/env bash

#  Copyright 2022 arcadium.dev <info@arcadium.dev>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# To use this tool it is assumed you have installed git, have setup
# an ssh key with github, and cloned the dotfiles repo.

declare dotfiles_dir
cd "$(dirname $0)"
dotfiles_dir="$(pwd -P)"
cd - >/dev/null 2>&1
declare -r dotfiles_dir

source "${dotfiles_dir}/common.sh"
set +o noglob

declare name email github_email tz

#_____________ shell environment _____________

install_shell_environment() {
  info "Setting up bash environment"

  local i d
  for i in .bash_profile .bashrc; do
    ln -sf "${dotfiles_dir}/${i}" "${HOME}/${i}"
  done

  mkdir -p "${HOME}/.rc.d"
  mkdir -p "${HOME}/.profile.d"
  mkdir -p "${HOME}/.projects.d"
  mkdir -p "${HOME}/bin"
  mkdir -p "${HOME}/pkg"
  mkdir -p "${HOME}/src/arcadium.dev"

  for i in "${dotfiles_dir}"/.rc.d/*; do
    ln -sf "${i}" "${HOME}/.rc.d/$(basename "${i}")"
  done
  for i in "${dotfiles_dir}"/.profile.d/*; do
    ln -sf "${i}" "${HOME}/.profile.d/$(basename "${i}")"
  done
  for i in ${dotfiles_dir}/.projects.d/*; do
    ln -sf "${i}" "${HOME}/.projects.d/$(basename "${i}")"
  done
  for i in ${dotfiles_dir}/bin/*; do
    ln -sf "${i}" "${HOME}/bin/$(basename "${i}")"
  done
}

uninstall_shell_environment() {
  info "Removing shell environment"

  rm -f "${HOME}/.bash_profile"
  rm -f "${HOME}/.bashrc"
  rm -f "${HOME}/.rc.d"
  rm -f "${HOME}/.profile.d"
  rm -f "${HOME}/.projects.d"
  rm -f "${HOME}/bin"
  rm -f "${HOME}/pkg"
  rm -f "${HOME}/src"
}

#_____________ user input _____________

gather_user_input() {
  info "Gathering user information"

  if [[ -f "${HOME}/.profile.d/01_user_info.sh" ]]; then
    msg "Use information already exists, skipping..."
    return
  fi

  local default_tz="America/Denver"

  printf "\n%-45s > " "Enter you full name (e.g. Bob Jones)"
  read name

  printf "\\n%-45s > " "Enter your arcadium.dev email"
  read email

  printf "\n%-s\n%-s\n%-s\n%-45s > " \
    "Enter your github email address" \
    "  See: https://github.com/settings/emails" \
    "       Keep my email addresses private" \
    "  I.e <number>+<user>@users.noreply.github.com"
  read github_email

  printf "\n%-45s > " "Enter your timezone (default: ${default_tz})"
  read tz

  echo "export NAME=\"${name}\""   >  "${HOME}/.profile.d/01_user_info.sh"
  echo "export EMAIL=\"${email}\"" >> "${HOME}/.profile.d/01_user_info.sh"
  echo "export TZ=\"${tz}\""       >> "${HOME}/.profile.d/01_user_info.sh"
}

#_____________ git config _____________

install_git_config() {
  info "Setting up .gitconfig"

  if [[ -f "${HOME}/.gitconfig" ]]; then
    msg ".gitconfig already exists, skipping..."
    return
  fi

  cp -f  "${dotfiles_dir}/.gitconfig" "${HOME}/.gitconfig"
  ln -sf "${dotfiles_dir}/.gitignore_global" "${HOME}/.gitignore_global"

  git config --global user.name "${name}"
  git config --global user.email "${github_email}"
  git config --global core.excludesfile "${HOME}/.gitignore_global"
}

uninstall_git_config() {
  info "Removing git config"

  rm -f "${HOME}/.gitconfig"
  rm -f "${HOME}/.gitignore_global"
}

#_____________ sudo _____________
# sudo echo "${USER}         ALL=(ALL:ALL) NOPASSWD: ALL" > "/etc/sudoers.d/${USER}"

#_____________ brew _____________

install_brew() {
  # Only install brew on Macs.
  if ! is_darwin; then return; fi

  info "Installing brew"

  # Don't install brew if it is already installed.
  if command -v brew >/dev/null 2>&1; then
    msg "brew already installed"
  fi

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

uninstall_brew() {
  # Only uninstall brew on Macs.
  if ! is_darwin; then return; fi

  info "Uninstalling brew"

  # Don't uninstall brew if it is already installed.
  if ! command -v brew >/dev/null 2>&1; then
    msg "brew already uninstalled"
  fi

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
}

#_____________ software _____________

# direnv, rg (ripgrep), jq

#_____________ go _____________

# curl https://go.dev/VERSION?m=text

# uname -s, uname -m

#_____________ tmux _____________

#_____________ vim _____________

#_____________ vundle _____________

#_____________ docker _____________

#_____________ fly _____________

#_____________ ssh _____________

# For bin/agent, ensure that .ssh exists and the permissions are set to 700.

#_____________ terminator _____________

#_____________ fonts _____________

#_____________ software updates _____________

#_____________ install _____________

install() {
  install_shell_environment
  gather_user_input
  install_git_config
  #install_brew
}

uninstall() {
  uninstall_shell_environment
  uninstall_git_config
  #uninstall_brew
}

#_____________ main _____________

main() {
  if [[ ! -d "${HOME}/.files" ]]; then
    echo "The arcadium.dev/dotfiles repo must be cloned to the ${HOME}/.files directory."
    echo ""
    echo "  i.e. git clone git@github.com:arcadium-dev/dotfiles ${HOME}/.files"
    echo ""
    exit 1
  fi

  if [[ "${dotfiles_dir}" != "${HOME}/.files" ]]; then
    echo "The arcadium.dev/dotfiles/setup script must be called from ${HOME}/.files/setup"
    exit 1
  fi

  if [[ "${1:-}" == "uninstall" ]]; then
    uninstall
    return $?
  fi

  install
}

main "$@"
